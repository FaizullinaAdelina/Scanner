using Npgsql;

namespace Scanner
{
    public class VulnerabilityRepository
    {
        private readonly string connectionString;

        public VulnerabilityRepository(string connectionString)
        {
            this.connectionString = connectionString;
        }

        // Метод для динамических уязвимостей
        internal Vulnerability GetDynamicVulnerabilityByName(string name)
        {
            using (var conn = new NpgsqlConnection(connectionString))
            {
                conn.Open();
                using (var cmd = new NpgsqlCommand("SELECT id, name, description, severity, recommendation FROM vulnerabilities WHERE name = @name", conn))
                {
                    cmd.Parameters.AddWithValue("name", name);
                    using (var reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            return new Vulnerability
                            {
                                //Id = reader.GetInt32(0),
                                Name = reader.GetString(1),
                                Description = reader.GetString(2),
                                Severity = reader.GetString(3),
                                Recommendation = reader.GetString(4)
                            };
                        }
                    }
                }
            }
            return null;
        }

        // Метод для статических уязвимостей
        internal Vulnerability GetStaticVulnerabilityByName(string name)
        {
            using (var conn = new NpgsqlConnection(connectionString))
            {
                conn.Open();
                using (var cmd = new NpgsqlCommand("SELECT id, name, description, severity, recommendation FROM static_vulnerabilities WHERE name = @name", conn))
                {
                    cmd.Parameters.AddWithValue("name", name);
                    using (var reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            return new Vulnerability
                            {
                                //Id = reader.GetInt32(0),
                                Name = reader.GetString(1),
                                Description = reader.GetString(2),
                                Severity = reader.GetString(3),
                                Recommendation = reader.GetString(4)
                            };
                        }
                    }
                }
            }
            return null;
        }
    }
}
